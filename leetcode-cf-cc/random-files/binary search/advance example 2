dfs with binary search problem link: https://leetcode.com/problems/swim-in-rising-water/

#include<bits/stdc++.h> 
#define int long long
#define vi vector<int>
#define vii vector<vi>
#define pii pair<int,int>
#define rep(i,a,b) for(int i=a; i<b; i++)
#define rrep(i,a,b) for(int i=a; i>=b; i--)
#define pb(i) push_back(i)
#define all(b) b.begin(),b.end()
using namespace std;
const int mod = 1e9 + 7;
const int inf = 1e10 + 20;
using pii = pair<int,int>;
int bfs(vector<vector<int>> grid,int val){
    int n = grid.size(), m = grid[0].size();
    queue<pair<int,int>> q;
    vii vis(n,vi(m,0));

    vii dir ={{1,0},{0,1},{0,-1},{-1,0}};
    q.push({0,0});
    vis[0][0] = 1;
    
    while(!q.empty()){
        int x = q.front().first, y = q.front().second;
        q.pop();
        if(grid[x][y]<=val){
            if(x==n-1 && y== m-1)
                return true;
            rep(i, 0, 4){
                int a = x + dir[i][0];
                int b = y + dir[i][1];
                if(a>=0 && a<n && b>=0 && b<m && !vis[a][b]){
                    vis[a][b] = 1;
                    q.emplace(a,b);
                }
            }
        }
    }
    
    return 0;
}
void test_case(){
    int n; cin>>n;
    vii grid(n, vi(n,0));
    rep(i,0,n){
        rep(j,0,n){
            cin>>grid[i][j];
        }
    }

    int lo = grid[0][0], hi = n * n;
        int ans = 0;
        while(lo<=hi){
            int mid = lo + (hi - lo)/2;
            if(bfs(grid,mid)){
                ans = mid;
                hi = mid - 1;
            }
            else{
                lo = mid + 1;
            }
        }
    return ans;
}
 signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);


    int t = 1;  cin>>t;
    while(t--){
        test_case();
        cout<<'\n';
    }
    return 0;
}
