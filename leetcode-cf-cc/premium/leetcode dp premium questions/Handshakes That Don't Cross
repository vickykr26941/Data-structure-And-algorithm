You are given an even number of people num_people that stand around a circle and each person shakes hands with someone else, so that there are num_people / 2 handshakes total.

Return the number of ways these handshakes could occur such that none of the handshakes cross.

Since this number could be very big, return the answer mod 10^9 + 7

 

Example 1:

Input: num_people = 2
Output: 1
Example 2:



Input: num_people = 4
Output: 2
Explanation: There are two ways to do it, the first way is [(1,2),(3,4)] and the second one is [(2,3),(4,1)].
Example 3:



Input: num_people = 6
Output: 5
Example 4:

Input: num_people = 8
Output: 14
 

Constraints:

2 <= num_people <= 1000
num_people % 2 == 0





// pattern catalan number 

// class Solution {
// public:
//     const int mod = 1e9 + 7;
//     vector<long> dp;
//     int solve(int n){
//         if(n <= 1) return 1;
//         else if(dp[n] != -1) return dp[n];
//         long res = 0;
//         for(int i = 0; i<n; i++){
//             res += (long)solve(i) * (long)solve(n - i - 1) % mod;
//             res = res % mod;
//         }
//         return dp[n] = res % mod;
//     }
//     int numberOfWays(int num_people) {
//         int n = num_people / 2;
//         dp.assign(n + 1, -1);
//         return solve(n) % mod;
//     }
// };



// f(0) = 1
// sum(f(i) * f(n - i - 1)) i>=0
    
class Solution {
public:
    const int mod = 1e9 + 7;
    vector<int> dp;
    int solve(int n){
        if(n == 0 or n == 2) return 1;
        if(n % 2 == 1) return 0;
        else if(dp[n] != -1) return dp[n];
        
        long res = 0;
        for(int i = 0; i<n; i+=2){
            res += (long)solve(i) * (long)solve(n - i - 2) % mod;
            res %= mod;
        }
        return dp[n] = res %mod;
    }
    int numberOfWays(int num_people) {
        dp.assign(num_people + 1, -1);
        return solve(num_people);
    }
};




// // number of ways these handshakes can occures
// 1 2 3 4
    
// 1 --- 2
// 3 --- 4



