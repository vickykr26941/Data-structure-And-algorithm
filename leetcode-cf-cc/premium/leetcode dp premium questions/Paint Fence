You are painting a fence of n posts with k different colors. You must paint the posts following these rules:
    Every post must be painted exactly one color.
    There cannot be three or more consecutive posts with the same color.
Given the two integers n and k, return the number of ways you can paint the fence.

 

Example 1:
image : [https://github.com/vickykr26941/Data-structure-And-algorithm/blob/main/premium/leetcode%20dp%20premium%20questions/Images/paintfenceex1.png]


Input: n = 3, k = 2
Output: 6
Explanation: All the possibilities are shown.
Note that painting all the posts red or all the posts green is invalid because there cannot be three posts in a row with the same color.
Example 2:

Input: n = 1, k = 1
Output: 1
Example 3:

Input: n = 7, k = 2
Output: 42
 

Constraints:
    1 <= n <= 50
    1 <= k <= 105
    The testcases are generated such that the answer is in the range [0, 231 - 1] for the given n and k





// 2 jan 22
// https://leetcode.com/problems/paint-fence/submissions/

           // will be time limt exceeded not the good way 
// class Solution {
// public:

//     int solve(int i,int n,int k,int l,int r){
//         if(i >= n) return 1;
        
//         int ans = 0;
//         for(int j = 0; j<k; j++){
//             if(l == r){
//                 if(l == j) continue;
//                 ans += solve(i + 1,n,k,r,j);
//             }else{
//                 ans += solve(i + 1,n,k,r,j);
//             }
//         }
//         return ;
//     }
//     int numWays(int n, int k) {
        
//         memset(dp,-1,sizeof(dp));
//         return solve(0,n,k,-1,-1);
//     }
// };


// // x x x x x x x x . .... .....


class Solution {
public:
    
    int dp[55];
    int solve(int n,int k){
        if(n == 1) return k;
        else if(n == 2) return k * k;
        else if(dp[n] != -1) return dp[n];
        return dp[n] = (k - 1) * solve(n - 1, k) + (k - 1) * solve(n - 2,k);
    }
    int numWays(int n, int k) {
        
        memset(dp,-1,sizeof(dp));
        return solve(n,k);
    }
};


// x x x x x x x x . .... .....

    
 
