There is a row of n houses, where each house can be painted one of three colors: red, blue, or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by an n x 3 cost matrix costs.
   For example, costs[0][0] is the cost of painting house 0 with the color red; costs[1][2] is the cost of painting house 1 with color green, and so on...
Return the minimum cost to paint all houses.

 

Example 1:

Input: costs = [[17,2,17],[16,16,5],[14,3,19]]
Output: 10
Explanation: Paint house 0 into blue, paint house 1 into green, paint house 2 into blue.
Minimum cost: 2 + 5 + 3 = 10.
Example 2:

Input: costs = [[7,6,2]]
Output: 2
 

Constraints:
    costs.length == n
    costs[i].length == 3
    1 <= n <= 100
    1 <= costs[i][j] <= 20



// https://leetcode.com/problems/paint-house/
// date : 2 jan 22


class Solution {
public:
    
    int dp[105][5];
    int solve(vector<vector<int>> &arr,int i,int prev){
        if(i >= arr.size()) return 0;
        else if(dp[i][prev + 1] != -1) return dp[i][prev + 1];
        
        int ans = INT_MAX;
        for(int j : {0,1,2}){
            if(prev == j) continue;
            ans = min(ans, arr[i][j] + solve(arr,i + 1, j));
        }
        return dp[i][prev + 1] = ans;
    }
    int minCost(vector<vector<int>>& costs) {
        
        memset(dp,-1,sizeof(dp));
        return solve(costs,0,-1);
    }
};

